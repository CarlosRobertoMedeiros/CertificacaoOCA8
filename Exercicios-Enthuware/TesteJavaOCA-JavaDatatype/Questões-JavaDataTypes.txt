********************************************************************************************************************
INÍCIO DAS QUESTÕES DE JAVA DATATYPE
********************************************************************************************************************
1 -

Given:
String mStr = "123";
long m = // 1
Which of the following options when put at //1 will assign 123 to m?

1 - new Long(mStr);  --CERTO
    //Auto unboxing will occur.
2 - Long.parseLong(mStr);  --CERTO
3 - Long.longValue(mStr);
    //longValue is a non-static method in Long class.
4 - (new Long()).parseLong(mStr);
    //Long (or any wrapper class) does not have a no-args constructor, so new Long() is invalid.
5 - Long.valueOf(mStr).longValue(); --CERTO
    //Long.valueOf(mStr) returns a Long object containing 123. longValue() on the Long object returns 123.
	
********************************************************************************************************************
2 - 

Which is the earliest line in the following code after which the object created on line // 1 can be garbage collected, assuming no compiler optimizations are done?

public class NewClass{
   private Object o;
   void doSomething(Object s){  o = s;   }

   public static void main(String args[]){
      Object obj = new Object(); // 1
      NewClass tc = new NewClass(); //2
      tc.doSomething(obj); //3
      obj = new Object();    //4 --> Aqui apontou o mesmo objeto
      obj = null;    //5
      tc.doSomething(obj); //6
   }
}

1 - Line 1
2 - Line 2
3 - Line 3
4 - Line 4
5 - Line 5
6 - Line 6 --CERTO
	//Before this line the object is being pointed to by at least one variable

General

The official exam objectives now explicitly mention Garbage collection.  All you need 
to know is:

1. An object can be made eligible for garbage collection by making sure there are no 
references pointing to that object.
2. You cannot directly invoke the garbage collector. You can suggest the JVM to perform 
garbage collection by calling System.gc();


********************************************************************************************************************	
3 - 

Which of the changes given in options can be done (independent of each other) to let the following code compile and run without errors when its generateReport method is called?

class SomeClass{
   String s1 = "green mile";   // 0
   public void generateReport( int n ){
      String local;   // 1 --> Variáveis Locais devem ser inicializadas, pois a jvm não faz
      if( n > 0 ) local = "good";   //2
      System.out.println( s1+" = " + local );   //3
   }
}

1 - Insert after line 2 : else local = "bad"; --CERTO
2 - Insert after line 2 : if(n <= 0) local = "bad";
3 - Move line 1 and place it after line 0. --CERTO
4 - Change line 1 to : final String local = "rocky";
	//Making it final will not let //2 compile as it would then try to modify a final variable.
5 - The program already is without any errors.

General

The problem is that local is declared inside a method is therefore local to that method. 
It is called a local variable (also known as automatic variable) and it cannot be used 
before initialized. Further, it will not be initialized unless you initialize it 
explicitly because local variables are not initialized by the JVM on its own. The 
compiler spots the usage of such uninitialized variables and ends with an error message.

1. Making it a member variable (choice "Move line 1 and place it after line 0.") 
will initialize it to null.
2. Putting an else part (choice "Insert after line 2 : else local = "bad";") will 
ensure that it is initialized to either 'good' or 'bad'. So this also works.
Choice "Insert after line 2 : if(n <= 0) local = "bad";" doesn't work because the 
second 'if' will actually be another statement and is not considered as a part of first 'if'. 
So, compiler doesn't realize that 'local' will be initialized even though it does get 
initialized.

********************************************************************************************************************

4 - 

What will be the result of attempting to compile and run the following class?

public class TestClass{
   public static void main(String args[ ] ){
      int i, j, k;
      i = j = k = 9;
      System.out.println(i);
   }
}

1 - The code will not compile because unlike in c++, operator '=' cannot be chained 
i.e. a = b = c = d is invalid.
  // can be chained. For example, assuming all the variables are declared appropriately before hand, a = b = c = d; is valid.
  //However, chaining to use a value of a variable at the time of declaration is 
  //not allowed.
  //For example, int a = b = c = 100; is invalid if b and c are not already declared. 
  //Had b and c been already declared, int a = b = c = 100; would have been valid.

2 - The code will not compile as 'j' is being used before getting initialized.
  //j is being initialize by the expression k = 9, which evaluates to 9.
3 - The code will compile correctly and will display '9' when run. --CERTO
4 - The code will not compile as 'j' and 'i' are being used before getting initialized.
5 - All the variables will get a value of 9. --CERTO

General

Every expression has a value, in this case the value of the expression is the value that
is assigned to the right hand side of the equation.
k has a value of 9 which is assigned to j and then to i.

Another implication of this is :
boolean b = false;
if( b = true) { System.out.println("TRUE");}
The above code is valid and will print TRUE. Because b = true has a boolean value, 
which is what an if statement expects.

Note that if( i = 5) { ... } is not valid because the value of the expression i = 5 is 
an int (5) and not a boolean.

********************************************************************************************************************

5 - 

Given that TestClass is a class, how many objects and reference variables are created by the following code?

TestClass t1, t2, t3, t4;
t1 = t2 = new TestClass();
t3 = new TestClass();

1 - 2 objects, 3 references.
2 - 2 objects, 4 references. -- CERTO
	//two news => two objects. t1, t2, t3, t4 => 4 references.
3 - 3 objects, 2 references.
4 - 2 objects, 2 references.
5 - None of the above.

General

A declared reference variable exists regardless of whether a reference value (
i.e. an object) has been assigned to it or not

********************************************************************************************************************
6 - 

Which of the following are valid code snippets appearing in a method:

1 - int a = b = c = 100;
  //Chaining to use a value of a variable at the time of declaration is not allowed. 
  //Had b and c been already declared, it would have been valid. For example, the following 
  //is valid:
  //int  b = 0, c = 0;
  //int a = b = c = 100;
  //Even the following is valid:
  //int  b , c;  //Not initializing b and c here.
  //int a = b = c = 100; //declaring a and initializing c, b, and a at the same time.
  //Notice the order of initialization of the variables - c is initialized first, b is initialized next by assigning to it the value of c. Finally, a is initialized.
2 - int a, b, c; a = b = c = 100; --CERTO
3 - int a, b, c=100; --CERTO
4 - int a=100, b, c; --CERTO
5 - int a= 100 = b = c;

General
Java does not allow chained initialization in declaration so option 1 and 5 are not valid.

********************************************************************************************************************
7 -

What will be the result of attempting to compile and run the following code?
public class InitClass{
   public static void main(String args[ ] ){
      InitClass obj = new InitClass(5);
   }
   int m;
   static int i1 = 5;
   static int i2 ;
   int  j = 100;
   int x;
   public InitClass(int m){
      System.out.println(i1 + "  " + i2 + "   " + x + "  " + j + "  " + m);
   }
  { j = 30; i2 = 40; }  // Instance Initializer
   static { i1++; }      // Static Initializer
}

1 - The code will fail to compile since the instance initializer tries to assign a value to a static member.
2 - The code will fail to compile since the member variable x will be uninitialized when it is used.
3 - The code will compile without error and will print 6 40 0 30 5 when run. --CERTO
4 - The code will compile without error and will print 5, 0, 0, 100, 5 when run.
5 - The code will compile without error and will print 5, 40, 0, 30, 0 when run.


General

The value 5 is passed to the constructor to the local (automatic) variable m. So the 
instance variable m is shadowed. Before the body of the constructor is executed, the 
instance initializer is executed and assigns values 30 and 40 to variables j and i2, 
respectively. A class is loaded when it is first used. For example,
class A1{
  static int i = 10;
  static { System.out.println("A1 Loaded "); }
}
public class A{
  static { System.out.println("A Loaded "); }
  public static void main(String[] args){
    System.out.println(" A should have been loaded");
    A1 a1 = null;
    System.out.println(" A1 should not have been loaded");
    System.out.println(a1.i);
  }
}

When you run it you get the output:
A Loaded
 A should have been loaded
 A1 should not have been loaded
A1 Loaded
10
Now, A should be loaded first as you are using its main method. Even though you are doing 
A1 a1 = null; A1 will not be loaded as it is not yet used (so the JVM figures out that it 
does not need to load it yet.) When you do a1.i, you are using A1, so before you use it, 
it must be loaded. That's when A1 is loaded. Finally 10 is printed.

********************************************************************************************************************
8 - 

Identify the valid code fragments when occurring by themselves within a method.

1 --long y = 123_456_L;
  //An underscore can only occur in between two digits. So the _ before L is invalid.
2 - long z = _123_456L;
  //An underscore can only occur in between two digits. So the _ before 1 is invalid.
  //_123_456L is a valid variable name though. So the following code is valid:
  //int _123_456L = 10;
  //long z = _123_456L;
  //An exception to this rule is that multiple continuous underscores can appear between 
  // two digits. For example, 2____3 is as good as 2_3 and is same as 23.
3 - float f1 = 123_.345_667F;
  //An underscore can only occur in between two digits. So the _ before . is invalid.
4 - float f2 = 123_345_667F; --CERTO
5 - None of the above declarations are valid.

General

You may use underscore for all kinds of numbers including long, double, float, binary, as well as hex.  For example, the following are all valid numbers -
int hex = 0xCAFE_BABE;
float f = 9898_7878.333_333f;
int bin = 0b1111_0000_1100_1100;

********************************************************************************************************************
9 - 

Which of the following options will yield a Boolean wrapper object containing the 
value true?

1 - Boolean.parseBoolean(" true ")
  //This will return false because of the extra spaces at the ends. Remember that case 
  // of the argment is ignored but spaces are not.
2 - Boolean.parseBoolean("true")
  //Although this will return true but it is still not a valid answer because 
  //parseBoolean returns a primitive and not a Boolean wrapper object.
3 - Boolean.valueOf(true) --CERTO
4 - Boolean.valueOf("trUE") --CERTO
5 - Boolean.TRUE --CERTO

General

You need to remember the following points about Boolean:

1. Boolean class has two constructors - Boolean(String) and Boolean(boolean)
The String constructor allocates a Boolean object representing the value true if the 
string argument is not null and is equal, ignoring case, to the string "true". 
Otherwise, allocate a Boolean object representing the value false. 
Examples: new Boolean("True") produces a Boolean object that represents true. 
new Boolean("yes") produces a Boolean object that represents false.

The boolean constructor is self explanatory.

2. Boolean class has two static helper methods for creating booleans - parseBoolean 
and valueOf.
Boolean.parseBoolean(String ) method returns a primitive boolean and not a 
Boolean object (Note - Same is with the case with other parseXXX methods such 
as Integer.parseInt - they return primitives and not objects). The boolean 
returned represents the value true if the string argument is not null and is equal, 
ignoring case, to the string "true".

Boolean.valueOf(String ) and its overloaded Boolean.valueOf(boolean ) version, 
on the other hand, work similarly but return a reference to either Boolean.TRUE 
or Boolean.FALSE wrapper objects. Observe that they dont create a new Boolean object 
but just return the static constants TRUE or FALSE defined in Boolean class.

3. When you use the equality operator ( == ) with booleans, if exactly one of the 
operands is a Boolean wrapper, it is first unboxed into a boolean primitive and then the 
two are compared (JLS 15.21.2). If both are Boolean wrappers, then their references 
are compared just like in the case of other objects. Thus, new Boolean("true") == new 
Boolean("true") is false, but new Boolean("true") == Boolean.parseBoolean("true") is 
true.

********************************************************************************************************************

10 - 

Note: This question may be considered too advanced for this exam.

Which statements can be inserted at line 1 in the following code to make the program write x on the standard output when run?

public class AccessTest{
   String a = "x";
   static char b = 'x';
   String  c = "x";
   class Inner{
      String  a = "y";
      String  get(){
         String c = "temp";
         // Line 1
         return c;
      }
   }

   AccessTest() { 
     System.out.println(  new Inner().get()  ); 
   }

   public static void main(String args[]) {  new AccessTest();  }
}


1 - c = c;
	//It will reassign 'temp' to c!
2 - c = this.a;
	//It will assign "y" to c.
3 - c = ""+AccessTest.b; --CERTO
	//Because b is static
4 - c = AccessTest.this.a; --CERTO 
5 - c = ""+b; --CERTO

********************************************************************************************************************
11 - 

Assume that a, b, and c refer to instances of primitive wrapper classes. Which of the following statements are correct?

1 - a.equals(a) will always return true. --CERTO
2 - b.equals(c) may return false even if c.equals(b) returns true.
3 - a.equals(b) returns same as a == b.
  //The wrapper classes's equals() method overrides Object's equals() method to 
  // compare the actual value instead of the reference
4 - a.equals(b) throws an exception if they refer to instances of different classes.
  //It returns false in such a case
5 - a.equals(b) returns false if they refer to instances of different classes. --CERTO

General

Equals method of a primitive wrapper class ( e.g. java.lang.Integer, Double, Float etc) 
are
1. symmetric => a.equals(b) returns same as b.equals(a)
2. transitive => if a.equals(b) and b.equals(c) return true, then a.equals(c) returns true.
3. reflexive => a.equals(a) return true.

For example, the following code for the equals method on Integer explains how it works:
public boolean equals(Object obj) {
   if (obj instanceof Integer) {
       return value == ((Integer)obj).intValue();
   }
   return false;
}

********************************************************************************************************************
12 - 

What happens when you try to compile and run the following program?
public class CastTest{
   public static void main(String args[ ] ){
      byte b = -128 ;
      int i = b ;
      b = (byte) i;
      System.out.println(i+" "+b);
   }
}

1 - The compiler will refuse to compile it because i and b are of different types 
    cannot be assigned to each other.
2 - The program will compile and will print -128 and -128 when run . --CERTO
	// A byte can ALWAYS be assigned to an int.
3 - The compiler will refuse to compile it because -128 is outside the legal range of 
    values for a byte.
	//Range of byte is -128 to 127
4 - The program will compile and will print 128 and -128 when run .
5 - The program will compile and will print 255 and -128 when run .

General
  byte and int both hold signed values. So when b is assigned to i, the sign is preserved.

********************************************************************************************************************

13 - 

  Which of the following comparisons will yield false?
  
  1 - Boolean.parseBoolean("true") == true
  2 - Boolean.parseBoolean("TrUe") == new Boolean(null); --CERTO
	//This will yield false because parseBoolean("TrUe") will return true and 
	//new Boolean(null) will return a Boolean wrapper object containing
  3 - new Boolean("TrUe") == new Boolean(true); --CERTO
	//Even though both the sides have a Boolean wrapper containing true, the expression 
	//will yield false because they point to two different Boolean wrapper objects
  4 - new Boolean() == false; 
	//This will not compile because Boolean class does not have a no-args constructor.
  5 - new Boolean("true") == Boolean.TRUE --CERTO
	// Even though both the sides have a Boolean wrapper containing true, the expression 
	// will yield false because they point to two different Boolean wrapper objects
  6 - new Boolean("no") == false;
    //Any string other than "true" (ignoring case) will produce a Boolean 
	//containing false. Therefore, this expression will yield true
	
General

You need to remember the following points about Boolean:

1. Boolean class has two constructors - Boolean(String) and Boolean(boolean)
The String constructor allocates a Boolean object representing the value true if the 
string argument is not null and is equal, ignoring case, to the string "true". 
Otherwise, allocate a Boolean object representing the value false. 
Examples: new Boolean("True") produces a Boolean object that represents true. 
new Boolean("yes") produces a Boolean object that represents false.

The boolean constructor is self explanatory.

2. Boolean class has two static helper methods for creating booleans - parseBoolean and 
valueOf.
Boolean.parseBoolean(String ) method returns a primitive boolean and not a Boolean 
object (Note - Same is with the case with other parseXXX methods such as 
Integer.parseInt - they return primitives and not objects). The boolean returned 
represents the value true if the string argument is not null and is equal, ignoring case,
to the string "true".

Boolean.valueOf(String ) and its overloaded Boolean.valueOf(boolean ) version, on the 
other hand, work similarly but return a reference to either Boolean.TRUE or Boolean.FALSE 
wrapper objects. Observe that they dont create a new Boolean object but just return the 
static constants TRUE or FALSE defined in Boolean class.

3. When you use the equality operator ( == ) with booleans, if exactly one of the operands 
is a Boolean wrapper, it is first unboxed into a boolean primitive and then the two are 
compared (JLS 15.21.2). If both are Boolean wrappers, then their references are compared 
just like in the case of other objects. Thus, new Boolean("true") == new Boolean("true") 
is false, but new Boolean("true") == Boolean.parseBoolean("true") is true.

********************************************************************************************************************

14 - 

Identify correct statement(s) about the following code:

	int value = 1,000,000; //1
	switch(value){
		case 1_000_000 : System.out.println("A million 1"); //2
			break;
		case 1000000 : System.out.println("A million 2"); //3
			break;
	}
	
1 - It will print A million 1 when compiled and run.
2 - It will print A million 2 when compiled and run.
3 - Compilation fails only at line //1
4 - Compilation fails only at line //2
5 - Compilation fails only at line //3
6 - Compilation fails at line //1 and //3 --CERTO

General

1. You may use underscores (but not commas) to format a number for better code readability. So //1 is invalid.
2. Adding underscores doesn't actually change the number. The compiler ignores the underscores. So 1_000_000 and 1000000 are actually same and you cannot have two case blocks with the same value. Therefore, the second case at //3 is invalid.

You may use underscore for all kinds of numbers including long, double, float, binary, as well as hex.  For example, the following are all valid numbers -
int hex = 0xCAFE_BABE;
float f = 9898_7878.333_333f;
int bin = 0b1111_0000_1100_1100;

********************************************************************************************************************
15 - 
What will the following code print when run?

public class TestClass{	
    public static Integer wiggler(Integer x){
       Integer y = x + 10;
       x++;
       System.out.println(x);
       return y;
    }

    public static void main(String[] args){
       Integer dataWrapper = new Integer(5);
       Integer value = wiggler(dataWrapper);
       System.out.println(dataWrapper+value);
    }
}

1 - 5 and 20
2 - 6 and 515
3 - 6 and 20 --CERTO
4 - 6 and 615
5 - It will not compile.

General

1. Wrapper objects are always immutable. Therefore, when dataWrapper is passed into 
wiggler() method, it is never changed even when x++; is executed. However, x, which 
was pointing to the same object as dataWrapper, is assigned a new Integer object 
(different from dataWrapper) containing 6.

2. If both the operands of the + operator are numeric, it adds the two operands. Here, 
the two operands are Integer 5 and Integer 15, so it unboxes them, adds them, and prints 
20.

********************************************************************************************************************
16 -

When is the Object created at line //1 eligible for garbage collection?

public class TestClass{
  public Object getObject(){
     Object obj = new String("aaaaa");   //1
     Object objArr[] = new Object[1]; //2
     objArr[0] = obj; //3
     obj = null;      //4
     objArr[0] = null;//5
     return obj;      //6
  }
}

1 - Just after line 2.
2 - Just after line 3.
3 - Just after line 4.
4 - Just after line 5. --CERTO
5 - Just after line 6.

General

The official exam objectives now explicitly mention Garbage collection.  All you need to 
know is:

1. An object can be made eligible for garbage collection by making sure there are no 
references pointing to that object.
2. You cannot directly invoke the garbage collector. You can suggest the JVM to perform 
garbage collection by calling System.gc();

After line 3, both, obj and objArr[0] are pointing to the same String object.
After line 4, obj points to null but objArr[0] is still pointing to the String object.
After line 5, objArr[0] also starts pointing to null so there is no reference left 
that is pointing to the String object. So it is now available for Garbage collection.

********************************************************************************************************************
17 - 

Given the following declarations:
        int a = 5, b = 7, k = 0;
        Integer m = null;
and the following statements:

        k = new Integer(a) + new Integer(b);  //1
        k = new Integer(a) + b; //2
        k = a + new Integer(b); //3
        m = new Integer(a) + new Integer(b); //4

Executed independent of each other, what will be the value of k (for //1, //2, and //3) 
and m (for //4) after execution of each of these statements?

1 -
12
will not compile
will not compile
12

2 -
will not compile
will not compile
will not compile
12

3 - CERTO
12
12
12
12

4 -
will not compile
will not compile
will not compile
will not compile

5 -
12
12
12
will not compile


General

In all of these statements, auto-unboxing of integers will occur. 
For the last statement, after unboxing a and b, the value 12 will be boxed into an 
Integer object.

********************************************************************************************************************
18 - 

How many objects have been created by the time the main method reaches its end in the following code?
public class Noobs {
    public Noobs(){
        try{
            throw new MyException();
        }catch(Exception e){
        }
    }
    public static void main(String[] args) {
        Noobs a = new Noobs();
        Noobs b = new Noobs();
        Noobs c = a;
    }
}
class MyException extends Exception{
    
}

1 - 2
2 - 3
3 - 4 --CERTO
4 - 5
5 - 6

General

When a Noobs object is created, a MyException object is also created. Therefore a total 
of 4 objects are created. The line Noobs c = a; just assigns an existing Noobs object to 
c. No new object is created.

Note: Some candidates have reported getting a similar question.
The question is ambiguous because two Class objects (one for Noobs and one for MyException)
are also created. If you consider those, then the answer would be 6. A String array object
pointed to by args is also created and if you consider that, the answer would by 7. 
Further, several Thread objects are also created (although not directly by this code.) 
Since this is out of scope for the exam, it is best to ignore these kind of objects and 
consider only the objects created directly by the code.

********************************************************************************************************************
19 - 

After which line will the object created at line XXX be eligible for garbage collection?


public Object getObject(Object a) //0
   {

Object b = new Object();  //XXX

Object c, d = new Object(); //1
c = b; //2
b = a = null; //3
return c; //4
}

1 - //2
2 - //3
3 - //4
4 - Never in this method. --CERTO
5 - Cannot be determined.

General

Note that at line 2, c is assigned the reference of b. i.e. c starts pointing to the 
object created at //XXX. So even if at //3 b and a are set to null, the object is not 
without any reference.
Also, at //4 c is being returned. So the object referred to by c cannot be garbage 
collected in this method!

********************************************************************************************************************
20 - 

Which of these are NOT legal declarations within a class?

1 - static int sa ;
2 - final Object[ ] objArr = { null } ;
3 - abstract int t ; --CERTO
4 - abstract void format( ) ;
5 - final static private double PI = 3.14159265358979323846 ;

General

static and final are valid modifiers for both member field and method declarations within 
a class.
transient and volatile modifiers are only valid for member field declarations.
abstract and native are only valid for member methods.

Note: a class declaration can have only final, abstract and public as modifiers, unless 
it is a nested class, in which case, it can be declared private or  protected as well.
Within a method, a local variable may be declared as final.

********************************************************************************************************************
21 - 

Which of the following are valid classes?

public class ImaginaryNumber extends Number {  -- CERTO
//implementation for abstract methods of the base class
}
//Number is not a final class so you can extend it

public class ThreeWayBoolean extends Boolean {
//implementation for abstract methods of the base class
}
public class NewSystem extends System {
//implementation for abstract methods of the base class
}
public class ReverseString extends String {
//implementation for abstract methods of the base class
}

General

String, StringBuilder, and StringBuffer - all are final classes.

1. Remember that wrapper classes for primitives (java.lang.Boolean, java.lang.Integer, java.lang.Long, java.lang.Short etc.) are also final and so they cannot be extended.

2. java.lang.Number, however, is not final. Integer, Long, Double etc. extend Number.

3. java.lang.System is final as well.

********************************************************************************************************************
22 - 

Which of the following declarations are valid?

1 - float f1 = 1.0;
//1.0 is a double
2 - float f = 43e1;
//43e1 is a double
3 - float f = -1;    --CERTO
4 - float f = 0x0123;--CERTO
5 - float f = 4;     --CERTO

General

Although the values in the option 1 and 2 are compile time constants and the values i.e. 1.0 and 43e1 can fit into a float, implicit narrowing does not happen because implicit narrowing is permitted only among byte, char, short, and int.

********************************************************************************************************************

23 - 

Note: Although Wrapper classes are not explicitly mentioned in the exam objectives, we have seen some candidates get questions on this aspect of Wrapper classes.

What will be the output of the following program?

public class EqualTest{
   public static void main(String args[]){
      Integer i = new Integer(1) ;
      Long m = new Long(1);
      if( i.equals(m)) System.out.println("equal");   // 1
      else System.out.println("not equal");
   }
}

1 - equal
2 - not equal
3 - Compile time error at //1
4 - Runtime error at //1
5 - None of the above.

General

Signature of equals method is : boolean equals(Object o); So it can take any object.
The equals methods of all wrapper classes first check if the two object are of same class or not. If not, they immediately return false. Hence it will print not equal.

********************************************************************************************************************

24 - 

Given:
public class TestClass{
     public static void main(String[] args){
     int i = Integer.parseInt(args[1]);
     System.out.println(args[i]);
   }
}
What will happen when you compile and run the above program using the following command line:

java TestClass 1 2


1 - It will print 1
2 - It will print 2
3 - It will print some junk value.
4 - It will throw ArrayIndexOutOfBoundsException. --CERTO
5 - It will throw NumberFormatException
  //Note: NumberFormatException extends IllegalArgumentException, which in turn extends RuntimeException

General

1. Arrays are indexed from 0.
2. In java, the name of the class is not the first element of args.
So, when the command line is : java TestClass 1 2, args[0] is 1 and args[1] is 2.
When you try to access args[2], It will throw an ArrayIndexOutOfBoundsException because the array length is only 2 so args[2] is out of bounds.

********************************************************************************************************************
25 -

Which of the following are valid at line 1?

public class X{
    //line 1: insert code here.
}

1 - String s; --CERTO
2 - String s = 'asdf';
//A string must be enclosed in double quotes ".
3 - String s = 'a';
4 - String s = this.toString(); --CERTO
//nce every class directly or indirectly extends Object class and since Object class has a toString() method, 
//that toString() method will be invoked and the String that it returns will be assigned to s.
5 - String s = asdf;
//there is no variable asdf defined in the given class

********************************************************************************************************************
26 - 






























